#!/bin/bash -e

. /usr/lib/fatc/common


FATC_DAEMON_CONFIG='.daemons // {} | .[$stack_name] // {}'
FATC_SERVICE_CONFIG='.services // {} | .[$stack_name] // {}'
FATC_STACK_CONFIG='.[$stack_type] // {} | .[$stack_name] // {}'


fatc_configure_proxy_socket () {
    local index listen private_network protocol \
	  socket socket_path stack_name stack_type upstream
    stack_type="$1"
    stack_name="$2"
    index="$3"
    listen="$4"
    upstream="$5"
    private_network=no
    if [[ "$upstream" = :unix:* && "$listen" = ":unix:" ]]; then
	private_network=yes
    fi
    upstream=$(fatc_get_upstream_address "$stack_type" "$stack_name" "$upstream")
    listen=$(fatc_get_listen_address "$listen" "$stack_name" "$index")
    fatc_configure_proxy_service "$stack_type" "$stack_name" "$index" "$upstream" "$private_network"
    protocol=ListenStream
    if [ "${listen: -4}" = "/udp" ]; then
	protocol=ListenDatagram
	listen="${listen::-4}"
    fi
    socket="fatc.${stack_type}.${stack_name}.${index}--proxy.socket"
    socket_path="${FATC_SYSTEMD}/${socket}"
    cat > "$socket_path" <<EOF
[Socket]
$protocol=$listen
[Install]
WantedBy=sockets.target
EOF
    systemctl enable "$socket" 2> /dev/null
}


fatc_configure_proxy_service () {
    PROXY_SERVICE="${FATC_SYSTEMD}/fatc.${1}.${2}.${3}--proxy.service"
    cat > "$PROXY_SERVICE" <<EOF
[Unit]
Description=Proxy $1 service: $2.$3
Requires=fatc.$1.$2.service
After=fatc.$1.$2.service
[Service]
User=fatc
ExecStart=/usr/bin/fatctl start-proxy .5 $1 $2 $3 $4
PrivateTmp=yes
EOF
}


fatc_configure_systemd_service () {
    local config dependency depends depends_on \
	  healthy name onstart stack_name stack_type \
	  unit_path upstream use_criu
    stack_type="$1"
    stack_name="$2"
    config="$3"
    name="fatc.${1}.${2}"
    healthy=$(echo "$config" | jq -cr ".healthy")
    onstart=$(echo "$config" | jq -cr ".onstart // empty")
    upstream=$(echo "$config" | jq -cr ".tracks // [] | .[0] // {} | .upstream")
    if [[ "$upstream" = :unix:* ]]; then
	upstream=$(fatc_get_upstream_socket "$stack_type" "$stack_name" "$upstream")
    fi
    use_criu=$(echo "$config" | jq -cr ".use_criu // false")
    depends_on=$(echo "$config" | jq -cr '.depends_on // [] | join (" ")')
    depends=""
    for dependency in $depends_on; do
	depends="${depends} fatc.daemon.${dependency}.service"
    done

    unit_path="${FATC_SYSTEMD}/${name}.service"
    cat > "$unit_path" <<EOF
[Unit]
Description=Fatc ${stack_type}: ${stack_name}
Requires=fatc.configuration.service ${depends}
After=fatc.configuration.service ${depends}
[Install]
WantedBy=fatc.target
[Service]
User=fatc
ExecStart=/usr/bin/fatctl start-stack ${stack_type} ${stack_name} ${upstream} ${use_criu}
ExecStartPost=/usr/bin/fatctl wait-stack ${stack_type} ${stack_name} 0.5 "${healthy}" ${upstream} "${onstart}"
ExecStop=/usr/bin/fatctl stop-stack ${stack_type} ${stack_name} ${use_criu}
PassEnvironment=FATC_DAEMONS
PassEnvironment=FATC_DAEMONS_SOCKETS
PassEnvironment=FATC_SERVICES
PassEnvironment=FATC_SERVICES_SOCKETS
PassEnvironment=FATC_COMPOSE
PassEnvironment=FATC_USE_CRIU
PassEnvironment=FATC_CRIU
PassEnvironment=FATC_CONTAINERS
PassEnvironment=FATC_TIMEOUT_SOCKETS
RemainAfterExit=true
EOF
    systemctl enable "$name" 2> /dev/null
}


fatc_configure_backend () {
    local name service
    name="fatc.service.${1}"
    service="${FATC_SYSTEMD}/${name}.service"
    cat > "$service" <<EOF
[Unit]
Description=Service service: $1.$2
[Install]
WantedBy=fatc.target
[Service]
User=fatc
ExecStart=/usr/bin/fatctl start-backend $1
ExecStartPost=/usr/bin/fatctl wait-backend 0.5 $1 $2 "$3" $4
ExecStop=/usr/bin/fatctl stop-backend $1
PassEnvironment=FATC_SERVICES
PassEnvironment=FATC_SERVICES_SOCKETS
PassEnvironment=FATC_TIMEOUT_SOCKETS
RemainAfterExit=true
EOF
    systemctl enable "$name" 2> /dev/null
}


fatc_configure_service_idle () {
    local COMPOSE fun idle_fun service stack_name stack_type
    stack_type=$1
    stack_name=$2
    idle_fun=$3
    COMPOSE=$(fatc_get_stack_compose_command "$stack_type" "$stack_name")
    export COMPOSE
    fun=$(echo "$idle_fun" | envsubst '${COMPOSE}')
    service=$(echo '{}' | jq -cr --arg idle "$fun" '.idle = $idle')
    if [ ! -f "$FATC_IDLE" ]; then
	mkdir -p "$(dirname "$FATC_IDLE")"
	echo "{}" > "$FATC_IDLE"
    fi
    jq --arg stack_name "${stack_name}" \
       --argjson service "$service" \
       '.[$stack_name] = $service' "$FATC_IDLE" \
	| sponge "$FATC_IDLE"
}


fatc_get_listen_address () {
    if [ "$1" == ":unix:" ]; then
	fatc_get_listen_socket "$2" "$3"
    elif [[ "$listen" == :* ]];then
	network=$(echo "$1" | cut -d: -f2)
	port=$(echo "$1" | cut -d: -f3)
	address=$(docker network inspect "fatc_${network}" \
		      | jq -r '.[].IPAM.Config[].Gateway')
	echo "${address}:${port}"
    else
	echo "$1"
    fi
}


fatc_get_upstream_address () {
    if [[ "$3" = :unix:* ]]; then
	fatc_get_upstream_socket "$1" "$2" "$3"
    else
	echo "$3"
    fi
}


fatc_configure_track () {
    local config compose healthy index line listen \
	  result services stack_name stack_type track upstream
    stack_type=$1
    stack_name=$2
    index=$3
    track=$(echo "${4}" | base64 --decode)
    listen=$(echo "${track}" | jq -r ".listen // empty")
    upstream=$(echo "${track}" | jq -r ".upstream // empty")
    result=()
    fatc_configure_proxy_socket "$stack_type" "$stack_name" "$index" "$listen" "$upstream"
    result+=("${stack_type}.${stack_name}: <- $listen")
    compose=$(fatc_get_stack_compose "$stack_type" "$stack_name")
    if [ -f "$compose" ]; then
	services=$(fatc_get_stack_services "$stack_type" "$stack_name")
	result+=("${stack_type}.${stack_name}: -> docker: $upstream (${services%%*( )})")
    else
	result+=("${stack_type}.${stack_name}: -> $upstream")
	healthy=$(echo "${track}" | jq -r ".healthy // empty")
	fatc_configure_backend "$stack_name" "$index" "$healthy" "$upstream"
    fi
    for line in "${result[@]}"; do
	fatc_log "$line"
    done
}


fatc_configure_tracks () {
    local i stack_name stack_type track
    stack_type="$1"
    stack_name="$2"
    i=0
    for track in $(fatc_get_tracks "$stack_type" "$stack_name"); do
	fatc_configure_track "$stack_type" "$stack_name" "$i" "$track"
	i=$((i + 1))
    done
}


fatc_configure_composition () {
    local compose config idle_fun \
	  stack_name stack_type \
	  services track_count
    stack_type="$1"
    stack_name="$2"
    compose=$(fatc_get_stack_compose "$stack_type" "$stack_name")
    if [ ! -f "$compose" ]; then
	return
    fi
    config=$(jq -cr \
		--arg stack_name "$stack_name" \
		--arg stack_type "${stack_type}s" \
		"$FATC_STACK_CONFIG" \
		"$FATC_CONFIG")
    track_count=$(echo "$config" | jq -cr ".tracks // [] | length")
    fatc_configure_systemd_service "$stack_type" "$stack_name" "$config"
    if [[ "$track_count" = 0 && "$stack_type" = "daemon" ]]; then
	services=$(fatc_get_stack_services "$stack_type" "$stack_name")
	fatc_log "daemon.${stack_name}: docker: ${services%%*( )}"
    fi
    if [ "$stack_type" = "service" ]; then
	idle_fun=$(echo "$config" | jq -cr ".idle // empty")
	if [ -z "$idle_fun" ]; then
	    fatc_log_warn "Service ($stack_name) has no idle function and will never timeout"
	else
	    fatc_configure_service_idle "$stack_type" "$stack_name" "$idle_fun"
	fi
    fi
}


fatc_configure_stack () {
    local stack_name \
	  stack_type
    stack_type=$1
    stack_name=$2
    fatc_configure_tracks "$stack_type" "$stack_name"
    fatc_configure_composition "$stack_type" "$stack_name"
}


fatc_configure_daemon () {
    fatc_configure_stack daemon "$1"
}


fatc_configure_service () {
    fatc_configure_stack service "$1"
}


fatc_configure_parallel () {
    local dir stack_type runtype
    runtype="$1"
    stack_type="$2"
    dir=$(fatc_get_stack_dir "$stack_type")
    if [ -d "$dir" ]; then
	fatc_parallel "fatc_ls_dirs ${dir}" "fatc_${runtype}_${stack_type}"
    else
	fatc_log "No ${stack_type}s to ${runtype}"
    fi
}


fatc_configure_networks () {
    local cmd configured network network_name networks
    networks=$(jq -cr  '.networks // {} | keys | join(" ")' "$FATC_CONFIG")
    configured=$(docker network ls)
    for network in $networks; do
	network_name="fatc_${network}"
	subnet=$(jq -cr --arg network "$network"  '.networks // {} | .[$network].subnet // empty' "$FATC_CONFIG")
	gateway=$(jq -cr --arg network "$network"  '.networks // {} | .[$network].gateway // empty' "$FATC_CONFIG")
	# not sure if this should cane network and recreate if it exists
	# to enforce config
	if ! grep -q "$network_name" <<<"$configured" ; then
	    opts=""
	    if [ -n "$subnet" ]; then
		opts="$opts --subnet=$subnet"
	    fi
	    if [ -n "$gateway" ]; then
		opts="$opts --gateway=$gateway"
	    fi
	    cmd="docker network create $opts $network_name"
	    $cmd
	fi
    done
}


fatc_configure_volumes () {
    local cmd volume volumes
    volumes=$(jq -cr  '.volumes // {} | keys | join(" ")' "$FATC_CONFIG")
    for volume in $volumes; do
	owner=$(jq -cr --arg volume "$volume"  '.volumes // {} | .[$volume].owner // empty' "$FATC_CONFIG")
	permissions=$(jq -cr --arg volume "$volume"  '.volumes // {} | .[$volume].permissions // empty' "$FATC_CONFIG")
	mkdir -p "$volume"
	if [ -n "$owner" ]; then
	    chown "$owner" "$volume"
	fi
	if [ -n "$permissions" ]; then
	    chmod "$permissions" "$volume"
	fi
    done
}


fatc_configure () {
    export -f fatc_configure_backend
    export -f fatc_configure_composition
    export -f fatc_configure_track
    export -f fatc_configure_tracks
    export -f fatc_configure_stack
    export -f fatc_configure_proxy_service
    export -f fatc_configure_proxy_socket
    # export -f fatc_configure_update_services
    export -f fatc_configure_systemd_service

    export -f fatc_configure_service
    export -f fatc_configure_service_idle

    export -f fatc_configure_daemon
    export -f fatc_log
    export -f fatc_log_warn
    export -f fatc_log_err

    export -f fatc_get_listen_socket
    export -f fatc_get_listen_address
    export -f fatc_get_stack_compose
    export -f fatc_get_stack_compose_command
    export -f fatc_get_stack_dir
    export -f fatc_get_stack_services
    export -f fatc_get_sockets_dir
    export -f fatc_get_tracks
    export -f fatc_get_upstream_address
    export -f fatc_get_upstream_socket

    export FATC_COMPOSE
    export FATC_CONFIG
    export FATC_DAEMON_CONFIG
    export FATC_DAEMONS
    export FATC_DAEMONS_SOCKETS
    export FATC_PROXY_SOCKETS
    export FATC_SERVICE_CONFIG
    export FATC_SERVICES
    export FATC_SERVICES_SOCKETS
    export FATC_STACK_CONFIG
    export FATC_SYSTEMD

    fatc_configure_networks
    fatc_configure_volumes
    fatc_configure_parallel configure daemon
    fatc_configure_parallel configure service
}


fatc_render () {
    # export TPLS_DEBUG=1
    export TPLS_RENDER='.daemons | to_entries | map({key: .key, value: .value.template})[] | @base64'
    export TPLS_CONFIG="/etc/fatc/config.json"
    export TPLS_TEMPLATES_REGISTRY=/tmp/templates-registry
    tpls render /var/lib/fatc/daemons
    export TPLS_RENDER='.services | to_entries | map({key: .key, value: .value.template})[] | @base64'
    tpls render /var/lib/fatc/services
}
