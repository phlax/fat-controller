#!/bin/bash -e


. /usr/lib/fatc/common


function fatc_stack_service_stop () {
    local compose compose_file
    services=${3:1:-1}
    if [[ -n "$FATC_USE_CRIU" && "$FATC_USE_CRIU" != "false" ]]; then
	if [[ -n "$3" && "$3" != "false" ]]; then
	    fatc_stack_checkpoint "service_$1" "$3"
	fi
    fi
    compose_file=$FATC_SERVICES/$1/docker-compose.yml
    compose="$FATC_COMPOSE \
	   	    -p service_$1 \
		    -f $compose_file \
		    --skip-hostname-check \
		    --no-ansi"
    for service in $($compose config --services); do
	$compose stop "$service"
    done
}



function fatc_stack_service_check_socket_status () {
    local socket
    socket=$FATC_SERVICES_SOCKETS/$1/service.sock
    if [ -S "$socket" ]; then
	fatc_log_warn "Removing stale socket: $socket"
        rm "$socket"
    fi
}


fatc_stack_restore () {
    services=${2:1:-1}
    for container in ${services//,/ } ; do
	container_name="${1}_${container}_1"
	# container_id=$(docker container inspect --format "{{.ID}}" "$container_name")
	checkpoint_dir="$FATC_CRIU/$container_name"
	# container_dir="$FATC_CONTAINERS/$container_id"
	if [ -d "$checkpoint_dir" ]; then
	    # mv $checkpoint_dir/* $container_dir/checkpoints 2>/dev/null || true
	    echo "Attempting to restore from checkpoint"
	    if docker start --checkpoint=check1 "${1}_${container}_1"; then
		echo "Removing the checkpoint"
		docker checkpoint rm "${1}_${container}_1" check1
	    else
		echo "Unable to restore from checkpoint: ${1}_${container}_1"
	    fi
	fi
    done
}


fatc_stack_checkpoint () {
    services=${2:1:-1}

    for container in ${services//,/ } ; do
	container_name="${1}_${container}_1"
	# container_id=$(docker container inspect --format "{{.ID}}" "${container_name}")
	if docker checkpoint ls "${container_name}" | grep check1; then
	    docker checkpoint rm "${container_name}" check1
	fi
	docker checkpoint create "${container_name}" check1
    done
}


function fatc_stack_service_start () {
    local compose compose_file
    fatc_stack_service_check_socket_status "$1"
    compose_file=$FATC_SERVICES/$1/docker-compose.yml
    compose="$FATC_COMPOSE \
	   	    -p service_$1 \
		    -f $compose_file \
		    --skip-hostname-check \
		    --no-ansi"
    if [[ -n "$FATC_USE_CRIU" && "$FATC_USE_CRIU" != "false" ]]; then
	if [[ -n "$3" && "$3" != "false" ]]; then
	    $compose up --no-start
	    fatc_stack_restore "service_$1" "$3"
	fi
    fi
    $compose up -d --no-build --no-recreate
    $compose logs -f
}


function fatc_stack_daemon_clear_socket () {
    local socket
    socket="${FATC_DAEMONS_SOCKETS}/${1}/daemon.sock"
    if [ -S "$socket" ]; then
	fatc_log_warn "Removing stale socket: $socket"
        rm "$socket"
    fi
}


function fatc_stack_daemon_start () {
    local compose compose_file
    fatc_stack_daemon_clear_socket "$1"
    compose_file=$FATC_DAEMONS/$1/docker-compose.yml
    compose="$FATC_COMPOSE \
	   	    -p daemon_$1 \
		    -f $compose_file \
		    --skip-hostname-check \
		    --no-ansi"
    $compose up -d --no-build --no-recreate
    $compose logs -f
}


function fatc_stack_daemon_stop () {
    DC_FILE="$FATC_DAEMONS/${1}/docker-compose.yml"
    DC="$FATC_COMPOSE -p daemon_${1} -f ${DC_FILE} --skip-hostname-check --no-ansi"
    $DC down
    fatc_log "Daemon stack stopped $1"
}


fatc_stack_service_wait () {
    local address command ip network now port START taken UPSTREAM
    START=$(date +%s)
    if [[ -z "$3" || "$3" = null ]]; then
	return
    fi
    export UPSTREAM=$4
    if [[ $UPSTREAM = :* ]]; then
	# TODO: FIX TIMEOUT
	network=$(echo "$UPSTREAM" | cut -d: -f2)
	address=$(echo "$UPSTREAM" | cut -d: -f3)
	port=$(echo "$UPSTREAM" | cut -d: -f4)
	until [ -n "$ip" ]; do
	    ip=$(fatc_stack_resolve "$network" "$address")
	    if [ -z "$ip" ]; then
		sleep "$1"
	    fi
	done
	export UPSTREAM="$ip:$port"
    fi
    command=$(echo "$3" | envsubst '${UPSTREAM}')
    until $command; do
	sleep "$1"
	now=$(date +%s)
	taken=$(echo "$now - $START" | bc)
	if [[ "$taken" -gt "$FATC_TIMEOUT_SOCKETS" ]]; then
	    fatc_log_err "Timed out waiting for service: $2"
	    exit 1
	fi
    done
}


fatc_stack_daemon_wait () {
    local address command ip network now port taken START UPSTREAM
    START=$(date +%s)
    if [[ -z "$3" || "$3" = null ]]; then
	return
    fi
    export UPSTREAM=$4
    if [[ $UPSTREAM = :* ]]; then
	# TODO: FIX TIMEOUT
	network=$(echo "$UPSTREAM" | cut -d: -f2)
	address=$(echo "$UPSTREAM" | cut -d: -f3)
	port=$(echo "$UPSTREAM" | cut -d: -f4)
	until [ -n "$ip" ]; do
	    ip=$(fatc_stack_resolve "$network" "$address")
	    if [ -z "$ip" ]; then
		sleep "$1"
	    fi
	done
	export UPSTREAM="$ip:$port"
    fi
    command=$(echo "$3" | envsubst '${UPSTREAM}')
    echo "WAIT COMMAND: $command"
    until $command; do
	sleep "$1"
	now=$(date +%s)
	taken=$(echo "$now - $START" | bc)
	if [[ "$taken" -gt "$FATC_TIMEOUT_SOCKETS" ]]; then
	    fatc_log_err "Timed out waiting for daemon: $2"
	    exit 1
	fi
    done
}


fatc_list_services () {
    fatc_ls_dirs "${FATC_SERVICES}"
}


fatc_list_daemons () {
    fatc_ls_dirs "${FATC_DAEMONS}"
}
