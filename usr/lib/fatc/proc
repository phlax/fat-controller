#!/bin/bash -e


. /usr/lib/fatc/common


fatc_stack_restore () {
    services=${2:1:-1}
    for container in ${services//,/ } ; do
	container_name="${1}_${container}_1"
	# container_id=$(docker container inspect --format "{{.ID}}" "$container_name")
	checkpoint_dir="$FATC_CRIU/$container_name"
	# container_dir="$FATC_CONTAINERS/$container_id"
	if [ -d "$checkpoint_dir" ]; then
	    # mv $checkpoint_dir/* $container_dir/checkpoints 2>/dev/null || true
	    echo "Attempting to restore from checkpoint"
	    if docker start --checkpoint=check1 "${1}_${container}_1"; then
		echo "Removing the checkpoint"
		docker checkpoint rm "${1}_${container}_1" check1
	    else
		echo "Unable to restore from checkpoint: ${1}_${container}_1"
	    fi
	fi
    done
}


fatc_stack_checkpoint () {
    services=${2:1:-1}

    for container in ${services//,/ } ; do
	container_name="${1}_${container}_1"
	# container_id=$(docker container inspect --format "{{.ID}}" "${container_name}")
	if docker checkpoint ls "${container_name}" | grep check1; then
	    docker checkpoint rm "${container_name}" check1
	fi
	docker checkpoint create "${container_name}" check1
    done
}


function fatc_stack_clear_socket () {
    local socket
    socket=$(fatc_get_upstream_socket "$1" "$2" "$3")
    if [ -S "$socket" ]; then
	fatc_log_warn "Removing stale socket: $socket"
        rm "$socket"
    fi
}


function fatc_stack_start () {
    local compose stack_name stack_type upstream use_criu
    stack_type="$1"
    stack_name="$2"
    upstream="$3"
    use_criu="$4"
    fatc_stack_clear_socket "$stack_type" "$stack_name" "$upstream"
    compose=$(fatc_get_stack_compose_command "$stack_type" "$stack_name")
    if [[ -n "$FATC_USE_CRIU" && "$FATC_USE_CRIU" != "false" ]]; then
	if [[ -n "$use_criu" && "$use_criu" != "false" ]]; then
	    $compose up --no-start
	    fatc_stack_restore "${stack_type}_${stack_name}" "${use_criu}"
	fi
    fi
    $compose up -d --no-build --no-recreate
    $compose logs -f
}


function fatc_stack_stop () {
    local compose stack_name stack_type use_criu
    stack_type="$1"
    stack_name="$2"
    use_criu="$3"
    if [[ -n "$FATC_USE_CRIU" && "$FATC_USE_CRIU" != "false" ]]; then
	if [[ -n "$use_criu" && "$use_criu" != "false" ]]; then
	    fatc_stack_checkpoint "service_${stack_type}_${stack_name}" "$use_criu"
	fi
    fi
    compose=$(fatc_get_stack_compose_command "$stack_type" "$stack_name")
    $compose down
}


function fatc_stack_cleanup () {
    local compose container remaining stack_name stack_type
    stack_type="$1"
    stack_name="$2"
    compose=$(fatc_get_stack_compose_command "$stack_type" "$stack_name")
    remaining=$($compose ps -q | tr '\n' ' ')
    if [ -n "$remaining" ]; then
	for container in $remaining; do
	    fatc_log_warn "Forced removal of container ($stack_name): $container"
	    docker container rm -f "$container"
	done
	$compose down
    fi
    fatc_log "Stack stopped ${stack_type}/${stack_name}"
}


fatc_stack_wait () {
    local cmd healthy stack_dir stack_name stack_type \
	  start step upstream UPSTREAM
    stack_type="$1"
    stack_name="$2"
    step="$3"
    healthy="$4"
    upstream="$5"
    onstart="$6"
    start=$(date +%s)
    stack_dir=$(fatc_get_stack_dir "$stack_type")
    cd "${stack_dir}/${stack_name}"
    if [[ -z "$healthy" || "$healthy" = null ]]; then
	if [ -n "$onstart" ];then
	    $onstart
	fi
	return
    fi
    upstream=$(fatc_get_upstream "$upstream" "$step")
    export UPSTREAM="$upstream"
    cmd=$(echo "$healthy" | envsubst '${UPSTREAM}' | base64)
    if fatc_wait_for "$cmd" "$start" "$step" "$FATC_TIMEOUT_SOCKETS"; then
	if [ -n "$onstart" ];then
	    $onstart
	fi
    fi
}


fatc_list_services () {
    fatc_ls_dirs "${FATC_SERVICES}"
}


fatc_list_daemons () {
    fatc_ls_dirs "${FATC_DAEMONS}"
}
